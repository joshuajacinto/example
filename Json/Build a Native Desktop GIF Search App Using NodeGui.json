{"title":"Build a Native Desktop GIF Search App Using NodeGui","authors":["Atul Ramachandran"],"publisher":"sitepoint","version":1,"chapters":[{"title":"Preface","author":"","block":"k6r61d80","number":0,"contents":[{"block_type":"element","block":"k6r61xj1","search_text":"Build a Native Desktop GIF Search App Using NodeGui","text_count":51,"tag_name":"h2","attributes":{"id":"maintitle"},"children":[{"block_type":"text","content":"Build a Native Desktop GIF Search App Using NodeGui"}]},{"block_type":"element","block":"k6r61xj2","search_text":"Copyright © 2020 SitePoint Pty. Ltd.","text_count":36,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Copyright &copy; 2020 SitePoint Pty. Ltd."}]},{"block_type":"element","block":"k6r61xj3","search_text":"Author: Atul Ramachandran Cover Design: Alex Walker ","text_count":52,"tag_name":"ul","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"Author:"}]},{"block_type":"text","content":"Atul Ramachandran"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"Cover Design:"}]},{"block_type":"text","content":"Alex Walker"}]}]},{"block_type":"element","block":"k6r61xj4","search_text":"Notice of Rights","text_count":16,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Notice of Rights"}]},{"block_type":"element","block":"k6r61xj5","search_text":"All rights reserved. No part of this book may be reproduced, stored in a retrieval system or transmitted in any form or by any means, without the prior written permission of the publisher, except in the case of brief quotations embodied in critical articles or reviews.","text_count":269,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"All rights reserved. No part of this book may be reproduced, stored in a retrieval system or transmitted in any form or by any means, without the prior written permission of the publisher, except in the case of brief quotations embodied in critical articles or reviews."}]},{"block_type":"element","block":"k6r61xj6","search_text":"Notice of Liability","text_count":19,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Notice of Liability"}]},{"block_type":"element","block":"k6r61xj7","search_text":"The author and publisher have made every effort to ensure the accuracy of the information herein. However, the information contained in this book is sold without warranty, either express or implied. Neither the authors and SitePoint Pty. Ltd., nor its dealers or distributors will be held liable for any damages to be caused either directly or indirectly by the instructions contained in this book, or by the software or hardware products described herein.","text_count":456,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The author and publisher have made every effort to ensure the accuracy of the information herein. However, the information contained in this book is sold without warranty, either express or implied. Neither the authors and SitePoint Pty. Ltd., nor its dealers or distributors will be held liable for any damages to be caused either directly or indirectly by the instructions contained in this book, or by the software or hardware products described herein."}]},{"block_type":"element","block":"k6r61xj8","search_text":"Trademark Notice","text_count":16,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Trademark Notice"}]},{"block_type":"element","block":"k6r61xj9","search_text":"Rather than indicating every occurrence of a trademarked name as such, this book uses the names only in an editorial fashion and to the benefit of the trademark owner with no intention of infringement of the trademark.","text_count":218,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Rather than indicating every occurrence of a trademarked name as such, this book uses the names only in an editorial fashion and to the benefit of the trademark owner with no intention of infringement of the trademark."}]},{"block_type":"element","block":"k6r61xja","search_text":"","text_count":0,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/sitepoint-gray.svg","alt":"SitePoint logo","width":"160","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xjb","search_text":"Published by SitePoint Pty. Ltd.","text_count":32,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"br","attributes":{},"children":[]},{"block_type":"text","content":"Published by SitePoint Pty. Ltd."}]},{"block_type":"element","block":"k6r61xjc","search_text":"48 Cambridge Street Collingwood VIC Australia 3066 Web: www.sitepoint.com Email: books@sitepoint.com","text_count":100,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"48 Cambridge Street Collingwood"},{"block_type":"element","tag_name":"br","attributes":{},"children":[]},{"block_type":"text","content":"VIC Australia 3066"},{"block_type":"element","tag_name":"br","attributes":{},"children":[]},{"block_type":"text","content":"Web: www.sitepoint.com"},{"block_type":"element","tag_name":"br","attributes":{},"children":[]},{"block_type":"text","content":"Email: books@sitepoint.com"}]},{"block_type":"element","block":"k6r61xjd","search_text":"About SitePoint","text_count":15,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"About SitePoint"}]},{"block_type":"element","block":"k6r61xje","search_text":"SitePoint specializes in publishing fun, practical, and easy-to-understand content for web professionals. Visit sitepoint.com to access our blogs, books, newsletters, articles, and community forums. You’ll find a stack of information on JavaScript, PHP, Ruby, mobile development, design, and more.","text_count":297,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"SitePoint specializes in publishing fun, practical, and easy-to-understand content for web professionals. Visit"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.sitepoint.com/"},"children":[{"block_type":"text","content":"sitepoint.com"}]},{"block_type":"text","content":"to access our blogs, books, newsletters, articles, and community forums. You&rsquo;ll find a stack of information on JavaScript, PHP, Ruby, mobile development, design, and more."}]}]},{"title":"Build a Native Desktop GIF Search App Using NodeGui","author":"Atul Ramachandran","block":"k6r61d97","number":1,"contents":[{"block_type":"element","block":"k6r61xjf","search_text":"NodeGui is an open-source library for building cross-platform, native desktop apps with Node.js. NodeGui apps can run on macOS, Windows, and Linux. Apps built with NodeGui are written using JavaScript, styled with CSS and rendered as native desktop widgets using the Qt framework .","text_count":281,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/"},"children":[{"block_type":"text","content":"NodeGui"}]},{"block_type":"text","content":"is an open-source library for building cross-platform, native desktop apps with Node.js. NodeGui apps can run on macOS, Windows, and Linux. Apps built with NodeGui are written using JavaScript, styled with CSS and rendered as native desktop widgets using the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://doc.qt.io/"},"children":[{"block_type":"text","content":"Qt framework"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xjg","search_text":"Some of the features of NodeGui are:","text_count":36,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Some of the features of NodeGui are:"}]},{"block_type":"element","block":"k6r61xjh","search_text":"native widgets with built-in support for dark mode low CPU and memory footprint styling with CSS including complete support for Flexbox layout complete Node.js API support and access to all Node.js compatible npm modules excellent debugging support using Chrome’s DevTools first-class TypeScript support ","text_count":304,"tag_name":"ul","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"native widgets with built-in support for dark mode"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"low CPU and memory footprint"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"styling with CSS including complete support for Flexbox layout"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"complete Node.js API support and access to all Node.js compatible npm modules"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"excellent debugging support using Chrome&rsquo;s DevTools"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"first-class TypeScript support"}]}]},{"block_type":"element","block":"k6r61xji","search_text":"NodeGui is powered by the Qt framework, which makes it CPU and memory efficient compared with other Chromium-based solutions such as Electron. This means that applications written using NodeGui do not open up a browser instance and render the UI in it. Instead, all the widgets are rendered natively.","text_count":300,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"NodeGui is powered by the Qt framework, which makes it CPU and memory efficient compared with other Chromium-based solutions such as Electron. This means that applications written using NodeGui"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"do not"}]},{"block_type":"text","content":"open up a browser instance and render the UI in it. Instead, all the widgets are rendered natively."}]},{"block_type":"element","block":"k6r61xjj","search_text":"This tutorial will demonstrate how to install NodeGui and use it to build a meme searcher that lives in the system tray and communicates with the GIPHY API .","text_count":157,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This tutorial will demonstrate how to install NodeGui and use it to build a meme searcher that lives in the system tray and communicates with the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://developers.giphy.com/"},"children":[{"block_type":"text","content":"GIPHY API"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xjk","search_text":"The full source code for this tutorial is available on GitHub .","text_count":63,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The full source code for this tutorial is"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/sitepoint-editors/memesearchapp-nodegui-tutorial"},"children":[{"block_type":"text","content":"available on GitHub"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xjl","search_text":"Installation and Basic Setup","text_count":28,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Installation and Basic Setup"}]},{"block_type":"element","block":"k6r61xjm","search_text":"For this tutorial it’s assumed that you have Node.js v12 or greater installed. You can confirm that both Node and npm are available by running:","text_count":143,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"For this tutorial it&rsquo;s assumed that you have"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://nodejs.org/en/download/"},"children":[{"block_type":"text","content":"Node.js v12"}]},{"block_type":"text","content":"or greater installed. You can confirm that both Node and npm are available by running:"}]},{"block_type":"element","block":"k6r61xjn","search_text":"# This command should print the version of Node.js node -v # This command should print the version of npm npm -v ","text_count":113,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"# This command should print the version of Node.js\nnode -v\n\n# This command should print the version of npm\nnpm -v"}]}]},{"block_type":"element","block":"k6r61xjo","search_text":"If you need help with this step, check out our tutorial on installing Node .","text_count":76,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If you need help with this step, check out our"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/"},"children":[{"block_type":"text","content":"tutorial on installing Node"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xjp","search_text":"Install CMake and Compilation Tools","text_count":35,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Install CMake and Compilation Tools"}]},{"block_type":"element","block":"k6r61xjq","search_text":"NodeGui requires CMake and C++ compilation tools for building the native C++ layer of the project. Make sure you install CMake >= 3.1 along with a C++ compiler that supports C++11 and up. The detailed instructions are a bit different depending on your operating system.","text_count":269,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"NodeGui requires CMake and C++ compilation tools for building the native C++ layer of the project. Make sure you install CMake &gt;= 3.1 along with a C++ compiler that supports C++11 and up. The detailed instructions are a bit different depending on your operating system."}]},{"block_type":"element","block":"k6r61xjr","search_text":"macOS","text_count":5,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"macOS"}]},{"block_type":"element","block":"k6r61xjs","search_text":"It’s recommended to install CMake using Homebrew. Run the following commands in a terminal after installing Homebrew:","text_count":117,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"It&rsquo;s recommended to install CMake using Homebrew. Run the following commands in a terminal after installing Homebrew:"}]},{"block_type":"element","block":"k6r61xjt","search_text":"brew install cmake brew install make ","text_count":37,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"brew install cmake\nbrew install make"}]}]},{"block_type":"element","block":"k6r61xju","search_text":"You can confirm the installation by running:","text_count":44,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"You can confirm the installation by running:"}]},{"block_type":"element","block":"k6r61xjv","search_text":"# This command should print the version of CMake which should be higher than 3.1 cmake --version make --version ","text_count":112,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"# This command should print the version of CMake which should be higher than 3.1\ncmake --version\n\nmake --version"}]}]},{"block_type":"element","block":"k6r61xjw","search_text":"Lastly, you need GCC/Clang to compile C++ code. Verify that you have GCC installed using this command:","text_count":102,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Lastly, you need GCC/Clang to compile C++ code. Verify that you have GCC installed using this command:"}]},{"block_type":"element","block":"k6r61xjx","search_text":"gcc --version ","text_count":14,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"gcc --version"}]}]},{"block_type":"element","block":"k6r61xjy","search_text":"If you don’t have GCC installed, make sure you install Command Line Tools for Xcode or XCode Developer tools from Apple’s developer page .","text_count":138,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If you don&rsquo;t have GCC installed, make sure you install"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"Command Line Tools for Xcode"}]},{"block_type":"text","content":"or"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"XCode Developer tools"}]},{"block_type":"text","content":"from"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://developer.apple.com/download/more/"},"children":[{"block_type":"text","content":"Apple&rsquo;s developer page"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xjz","search_text":"Windows","text_count":7,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Windows"}]},{"block_type":"element","block":"k6r61xk0","search_text":"You can install CMake on Windows by downloading the latest release from the CMake download page .","text_count":97,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"You can install CMake on Windows by downloading the latest release from the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://cmake.org/download/"},"children":[{"block_type":"text","content":"CMake download page"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xk1","search_text":"It’s strongly recommend you use Powershell as the preferred terminal in Windows.","text_count":80,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"It&rsquo;s strongly recommend you use Powershell as the preferred terminal in Windows."}]},{"block_type":"element","block":"k6r61xk2","search_text":"You can confirm the CMake installation by running:","text_count":50,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"You can confirm the CMake installation by running:"}]},{"block_type":"element","block":"k6r61xk3","search_text":"# This command should print the version of CMake which should be higher than 3.1 cmake --version ","text_count":97,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"# This command should print the version of CMake which should be higher than 3.1\ncmake --version"}]}]},{"block_type":"element","block":"k6r61xk4","search_text":"Lastly, you need a C++ compiler. One possibility would be to install Visual Studio 2017 or higher . It’s recommended you choose the Desktop development with C++ workload during the installation process.","text_count":202,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Lastly, you need a C++ compiler. One possibility would be to"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2017"},"children":[{"block_type":"text","content":"install Visual Studio 2017 or higher"}]},{"block_type":"text","content":". It&rsquo;s recommended you choose the"},{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"Desktop development with C++"}]},{"block_type":"text","content":"workload during the installation process."}]},{"block_type":"element","block":"k6r61xk5","search_text":"Linux","text_count":5,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Linux"}]},{"block_type":"element","block":"k6r61xk6","search_text":"We’ll focus on Ubuntu 18.04 for the purposes of this tutorial. It’s recommended to install CMake using the package manager. Run the following commands in a terminal:","text_count":165,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We&rsquo;ll focus on Ubuntu 18.04 for the purposes of this tutorial. It&rsquo;s recommended to install CMake using the package manager. Run the following commands in a terminal:"}]},{"block_type":"element","block":"k6r61xk7","search_text":"sudo apt-get install pkg-config build-essential sudo apt-get install cmake make ","text_count":80,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"sudo apt-get install pkg-config build-essential\nsudo apt-get install cmake make"}]}]},{"block_type":"element","block":"k6r61xk8","search_text":"You can confirm the installation by running:","text_count":44,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"You can confirm the installation by running:"}]},{"block_type":"element","block":"k6r61xk9","search_text":"# This command should print the version of CMake which should be higher than 3.1 cmake --version make --version ","text_count":112,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"# This command should print the version of CMake which should be higher than 3.1\ncmake --version\n\nmake --version"}]}]},{"block_type":"element","block":"k6r61xka","search_text":"Lastly, you need GCC to compile C++ code. Verify that you have GCC installed using the command:","text_count":95,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Lastly, you need GCC to compile C++ code. Verify that you have GCC installed using the command:"}]},{"block_type":"element","block":"k6r61xkb","search_text":"# gcc version should be >= v7 gcc --version ","text_count":44,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"# gcc version should be &gt;= v7\ngcc --version"}]}]},{"block_type":"element","block":"k6r61xkc","search_text":"Hello World","text_count":11,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Hello World"}]},{"block_type":"element","block":"k6r61xkd","search_text":"In order to get started with our NodeGui meme app, we’ll clone the starter project.","text_count":83,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In order to get started with our NodeGui meme app, we&rsquo;ll clone the starter project."}]},{"block_type":"element","block":"k6r61xke","search_text":"Git and npm","text_count":11,"tag_name":"h4","attributes":{},"children":[{"block_type":"text","content":"Git and npm"}]},{"block_type":"element","block":"k6r61xkf","search_text":"Running this requires Git and npm.","text_count":34,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Running this requires Git and npm."}]},{"block_type":"element","block":"k6r61xkg","search_text":"Open a terminal and run:","text_count":24,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Open a terminal and run:"}]},{"block_type":"element","block":"k6r61xkh","search_text":"git clone https://github.com/nodegui/nodegui-starter memeapp cd memeapp npm install npm start ","text_count":94,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"git clone https://github.com/nodegui/nodegui-starter memeapp\ncd memeapp\nnpm install\nnpm start"}]}]},{"block_type":"element","block":"k6r61xki","search_text":"If everything goes well, you should see a working hello world NodeGui app on the screen.","text_count":88,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If everything goes well, you should see a working hello world NodeGui app on the screen."}]},{"block_type":"element","block":"k6r61xkj","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/hello-world.png","alt":"Hello World NodeGui example","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xkk","search_text":"By default, the nodegui-starter project is a TypeScript project. However, in this tutorial we’ll be writing our application in JavaScript. In order to convert our starter to a JS project, we’ll make the following minor changes:","text_count":227,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"By default, the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/nodegui/nodegui-starter"},"children":[{"block_type":"text","content":"nodegui-starter project"}]},{"block_type":"text","content":"is a TypeScript project. However, in this tutorial we&rsquo;ll be writing our application in JavaScript. In order to convert our starter to a JS project, we&rsquo;ll make the following minor changes:"}]},{"block_type":"element","block":"k6r61xkl","search_text":"Delete the index.ts file in the src folder. Create a new file index.js in the src directory with the following contents: src/index.js const { QMainWindow, QLabel } = require('@nodegui/nodegui'); const win = new QMainWindow(); win.setWindowTitle('Meme Search'); const label = new QLabel(); label.setText('Hello World'); win.setCentralWidget(label); win.show(); global.win = win; ","text_count":378,"tag_name":"ol","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"Delete the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"index.ts"}]},{"block_type":"text","content":"file in the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"src"}]},{"block_type":"text","content":"folder."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Create a new file"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"index.js"}]},{"block_type":"text","content":"in the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"src"}]},{"block_type":"text","content":"directory with the following contents:"}]},{"block_type":"element","tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"src/index.js"}]}]},{"block_type":"element","tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const { QMainWindow, QLabel } = require('@nodegui/nodegui');\n\n const win = new QMainWindow();\n win.setWindowTitle('Meme Search');\n\n const label = new QLabel();\n label.setText('Hello World');\n\n win.setCentralWidget(label);\n win.show();\n\n global.win = win;"}]}]}]}]},{"block_type":"element","block":"k6r61xkm","search_text":"As far as development is concerned, a NodeGui application is essentially a Node.js application. All APIs and features found in NodeGui are accessible through the @nodegui/nodegui module, which can be required like any other Node.js module. Additionally, you have access to all Node.js APIs and Node modules. NodeGui uses native components instead of web-based components as building blocks.","text_count":390,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"As far as development is concerned, a NodeGui application is essentially a Node.js application. All APIs and features found in NodeGui are accessible through the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"@nodegui/nodegui"}]},{"block_type":"text","content":"module, which can be required like any other Node.js module. Additionally, you have access to all Node.js APIs and Node modules. NodeGui uses native components instead of web-based components as building blocks."}]},{"block_type":"element","block":"k6r61xkn","search_text":"In the above example, we’ve imported QMainWindow and QLabel to create a native window that displays the text “Hello World”.","text_count":123,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In the above example, we&rsquo;ve imported"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qmainwindow/"},"children":[{"block_type":"text","content":"QMainWindow"}]},{"block_type":"text","content":"and"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qlabel"},"children":[{"block_type":"text","content":"QLabel"}]},{"block_type":"text","content":"to create a native window that displays the text &ldquo;Hello World&rdquo;."}]},{"block_type":"element","block":"k6r61xko","search_text":"Now run the app again:","text_count":22,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Now run the app again:"}]},{"block_type":"element","block":"k6r61xkp","search_text":"npm start ","text_count":10,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"npm start"}]}]},{"block_type":"element","block":"k6r61xkq","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/js-hello-world.png","alt":"Hello World JavaScript version","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xkr","search_text":"Now that we have our basic setup ready, let’s start building our meme searcher 🥳.","text_count":82,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Now that we have our basic setup ready, let&rsquo;s start building our meme searcher 🥳."}]},{"block_type":"element","block":"k6r61xks","search_text":"Keeping NodeGui up to Date","text_count":26,"tag_name":"h4","attributes":{},"children":[{"block_type":"text","content":"Keeping NodeGui up to Date"}]},{"block_type":"element","block":"k6r61xkt","search_text":"If something doesn’t work while following this tutorial, check your package.json file to ensure that the starter project has pulled in the most up-to-date version of NodeGui.","text_count":174,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If something doesn&rsquo;t work while following this tutorial, check your"},{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"package.json"}]},{"block_type":"text","content":"file to ensure that the starter project has pulled in the most up-to-date version of NodeGui."}]},{"block_type":"element","block":"k6r61xku","search_text":"Displaying an Animated GIF","text_count":26,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Displaying an Animated GIF"}]},{"block_type":"element","block":"k6r61xkv","search_text":"Since memes are generally animated GIFs, we’ll start by creating a basic window that displays a GIF image from a URL.","text_count":117,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Since memes are generally animated GIFs, we&rsquo;ll start by creating a basic window that displays a GIF image from a URL."}]},{"block_type":"element","block":"k6r61xkw","search_text":"To do this, we’ll make use of QMovie along with QLabel. QMovie is not a widget but a container that can play simple animations. We’ll use it in combination with QLabel.","text_count":168,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"To do this, we&rsquo;ll make use of"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qmovie"},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"along with QLabel. QMovie is not a widget but a container that can play simple animations. We&rsquo;ll use it in combination with QLabel."}]},{"block_type":"element","block":"k6r61xkx","search_text":"An example usage of QMovie looks like this:","text_count":43,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"An example usage of QMovie looks like this:"}]},{"block_type":"element","block":"k6r61xky","search_text":"const movie = new QMovie(); movie.setFileName('/absolute/path/to/animated.gif'); movie.start(); const animatedLabel = new QLabel(); animatedLabel.setMovie(movie); ","text_count":163,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const movie = new QMovie();\nmovie.setFileName('/absolute/path/to/animated.gif');\nmovie.start();\n\nconst animatedLabel = new QLabel();\nanimatedLabel.setMovie(movie);"}]}]},{"block_type":"element","block":"k6r61xkz","search_text":"Since, we want to load an image from a URL, we can’t use QMovie ’s setFileName method, which is reserved only for local files. Instead, we’ll download the GIF image using axios as a buffer and use the QMovie method loadFromData instead.","text_count":236,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Since, we want to load an image from a URL, we can&rsquo;t use"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"&rsquo;s"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qmovie#setfilename"},"children":[{"block_type":"text","content":"setFileName"}]},{"block_type":"text","content":"method, which is reserved only for local files. Instead, we&rsquo;ll download the GIF image using"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://www.npmjs.com/package/axios"},"children":[{"block_type":"text","content":"axios"}]},{"block_type":"text","content":"as a buffer and use the QMovie method"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qmovie#loadfromdata"},"children":[{"block_type":"text","content":"loadFromData"}]},{"block_type":"text","content":"instead."}]},{"block_type":"element","block":"k6r61xl0","search_text":"So let’s start with the axios installation:","text_count":43,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"So let&rsquo;s start with the axios installation:"}]},{"block_type":"element","block":"k6r61xl1","search_text":"npm i axios ","text_count":12,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"npm i axios"}]}]},{"block_type":"element","block":"k6r61xl2","search_text":"Now let’s create a function that will take a URL as a parameter and will return a configured QMovie instance for the GIF:","text_count":121,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Now let&rsquo;s create a function that will take a URL as a parameter and will return a configured"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"instance for the GIF:"}]},{"block_type":"element","block":"k6r61xl3","search_text":"async function getMovie(url) { const { data } = await axios.get(url, { responseType: 'arraybuffer' }); const movie = new QMovie(); movie.loadFromData(data); movie.start(); return movie; } ","text_count":188,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"async function getMovie(url) {\n  const { data } = await axios.get(url, { responseType: 'arraybuffer' });\n  const movie = new QMovie();\n  movie.loadFromData(data);\n  movie.start();\n  return movie;\n}"}]}]},{"block_type":"element","block":"k6r61xl4","search_text":"The getMovie function takes in a URL, tells axios to download the GIF as a buffer, and then uses that buffer to create a QMovie instance.","text_count":137,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"getMovie"}]},{"block_type":"text","content":"function takes in a URL, tells axios to download the GIF as a buffer, and then uses that buffer to create a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"instance."}]},{"block_type":"element","block":"k6r61xl5","search_text":"You can think of QMovie as a class that handles the inner logic of playing the GIF animation frame by frame. QMovie is not a widget, so it can’t be shown on the screen as it is. Instead, we’ll use a regular QLabel instance and set QMovie to it.","text_count":244,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"You can think of"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"as a class that handles the inner logic of playing the GIF animation frame by frame."},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"is not a widget, so it can&rsquo;t be shown on the screen as it is. Instead, we&rsquo;ll use a regular"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QLabel"}]},{"block_type":"text","content":"instance and set"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"to it."}]},{"block_type":"element","block":"k6r61xl6","search_text":"Since getMovie returns a promise, we need to make some changes to the code. After some minor refactoring, we end up with the following.","text_count":135,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Since"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"getMovie"}]},{"block_type":"text","content":"returns a promise, we need to make some changes to the code. After some minor refactoring, we end up with the following."}]},{"block_type":"element","block":"k6r61xl7","search_text":"src/index.js","text_count":12,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"src/index.js"}]}]},{"block_type":"element","block":"k6r61xl8","search_text":"const { QMainWindow, QMovie, QLabel } = require('@nodegui/nodegui'); const axios = require('axios').default; async function getMovie(url) { const { data } = await axios.get(url, { responseType: 'arraybuffer' }); const movie = new QMovie(); movie.loadFromData(data); movie.start(); return movie; } const main = async () => { const win = new QMainWindow(); win.setWindowTitle('Meme Search'); const label = new QLabel(); const gifMovie = await getMovie( 'https://upload.wikimedia.org/wikipedia/commons/e/e3/Animhorse.gif' ); label.setMovie(gifMovie); win.setCentralWidget(label); win.show(); global.win = win; }; main().catch(console.error); ","text_count":639,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const { QMainWindow, QMovie, QLabel } = require('@nodegui/nodegui');\nconst axios = require('axios').default;\n\nasync function getMovie(url) {\n  const { data } = await axios.get(url, { responseType: 'arraybuffer' });\n  const movie = new QMovie();\n  movie.loadFromData(data);\n  movie.start();\n  return movie;\n}\n\nconst main = async () =&gt; {\n  const win = new QMainWindow();\n  win.setWindowTitle('Meme Search');\n\n  const label = new QLabel();\n  const gifMovie = await getMovie(\n    'https://upload.wikimedia.org/wikipedia/commons/e/e3/Animhorse.gif'\n  );\n  label.setMovie(gifMovie);\n\n  win.setCentralWidget(label);\n  win.show();\n  global.win = win;\n};\n\nmain().catch(console.error);"}]}]},{"block_type":"element","block":"k6r61xl9","search_text":"The main function is our entry point. Here we create a window and a label. We then instantiate a QMovie instance with the help of our getMovie function, and finally set the QMovie to a QLabel .","text_count":193,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"main"}]},{"block_type":"text","content":"function is our entry point. Here we create a window and a label. We then instantiate a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"instance with the help of our"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"getMovie"}]},{"block_type":"text","content":"function, and finally set the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"to a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QLabel"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xla","search_text":"Run the app with npm start and you should see something like this:","text_count":66,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Run the app with"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"npm start"}]},{"block_type":"text","content":"and you should see something like this:"}]},{"block_type":"element","block":"k6r61xlb","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/animation.gif","alt":"Basic animation example showing a galloping horse","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xlc","search_text":"Fetching GIFs from the GIPHY API","text_count":32,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Fetching GIFs from the GIPHY API"}]},{"block_type":"element","block":"k6r61xld","search_text":"Giphy.com has a public API which anyone can use to build great apps that use animated GIFs. In order to use the GIPHY API, you should register at developers.giphy.com and obtain an API key. You can find further instructions here .","text_count":230,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Giphy.com has a public API which anyone can use to build great apps that use animated GIFs. In order to use the GIPHY API, you should register at"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://developers.giphy.com"},"children":[{"block_type":"text","content":"developers.giphy.com"}]},{"block_type":"text","content":"and obtain an API key. You can find"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://support.giphy.com/hc/en-us/articles/360020283431-Request-A-GIPHY-API-Key"},"children":[{"block_type":"text","content":"further instructions here"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xle","search_text":"We’ll be using the search endpoint feature for implementing our meme search.","text_count":76,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We&rsquo;ll be using the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://developers.giphy.com/docs/api/endpoint/#search"},"children":[{"block_type":"text","content":"search endpoint"}]},{"block_type":"text","content":"feature for implementing our meme search."}]},{"block_type":"element","block":"k6r61xlf","search_text":"Let’s start by writing a searchGifs function that will take a searchTerms parameter as input and request GIFs using the above endpoint:","text_count":135,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Let&rsquo;s start by writing a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"searchGifs"}]},{"block_type":"text","content":"function that will take a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"searchTerms"}]},{"block_type":"text","content":"parameter as input and request GIFs using the above endpoint:"}]},{"block_type":"element","block":"k6r61xlg","search_text":"const GIPHY_API_KEY = 'Your API key here'; async function searchGifs(searchTerm) { const url = 'https://api.giphy.com/v1/gifs/search'; const res = await axios.get(url, { params: { api_key: GIPHY_API_KEY, limit: 25, q: searchTerm, lang: 'en', offset: 0, rating: 'pg-13' } }); return res.data.data; } ","text_count":299,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const GIPHY_API_KEY = 'Your API key here';\n\nasync function searchGifs(searchTerm) {\n  const url = 'https://api.giphy.com/v1/gifs/search';\n  const res = await axios.get(url, {\n    params: {\n      api_key: GIPHY_API_KEY,\n      limit: 25,\n      q: searchTerm,\n      lang: 'en',\n      offset: 0,\n      rating: 'pg-13'\n    }\n  });\n  return res.data.data;\n}"}]}]},{"block_type":"element","block":"k6r61xlh","search_text":"The result of the function after execution will look something like this:","text_count":73,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The result of the function after execution will look something like this:"}]},{"block_type":"element","block":"k6r61xli","search_text":"[ { \"type\": \"gif\", \"id\": \"dzaUX7CAG0Ihi\", \"url\": \"https://giphy.com/gifs/hello-hi-dzaUX7CAG0Ihi\", \"images\": { \"fixed_width_small\": { \"height\": \"54\", \"size\": \"53544\", \"url\": \"https://media3.giphy.com/media/dzaUX7CAG0Ihi/100w.gif?cid=725ec7e0c00032f700929ce9f09f3f5fe5356af8c874ab12&rid=100w.gif\", \"width\": \"100\" }, \"downsized_large\": { \"height\": \"220\", \"size\": \"807719\", \"url\": \"https://media3.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif?cid=725ec7e0c00032f700929ce9f09f3f5fe5356af8c874ab12&rid=giphy.gif\", \"width\": \"410\" }, ... }, \"slug\": \"hello-hi-dzaUX7CAG0Ihi\", ... \"import_datetime\": \"2016-01-07 15:40:35\", \"trending_datetime\": \"1970-01-01 00:00:00\" }, { type: \"gif\", ... }, ... ] ","text_count":681,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"[\n  {\n    \"type\": \"gif\",\n    \"id\": \"dzaUX7CAG0Ihi\",\n    \"url\": \"https://giphy.com/gifs/hello-hi-dzaUX7CAG0Ihi\",\n    \"images\": {\n      \"fixed_width_small\": {\n        \"height\": \"54\",\n        \"size\": \"53544\",\n        \"url\": \"https://media3.giphy.com/media/dzaUX7CAG0Ihi/100w.gif?cid=725ec7e0c00032f700929ce9f09f3f5fe5356af8c874ab12&amp;rid=100w.gif\",\n        \"width\": \"100\"\n      },\n      \"downsized_large\": {\n        \"height\": \"220\",\n        \"size\": \"807719\",\n        \"url\": \"https://media3.giphy.com/media/dzaUX7CAG0Ihi/giphy.gif?cid=725ec7e0c00032f700929ce9f09f3f5fe5356af8c874ab12&amp;rid=giphy.gif\",\n        \"width\": \"410\"\n      },\n      ...\n    },\n    \"slug\": \"hello-hi-dzaUX7CAG0Ihi\",\n    ...\n    \"import_datetime\": \"2016-01-07 15:40:35\",\n    \"trending_datetime\": \"1970-01-01 00:00:00\"\n  },\n  {\n    type: \"gif\",\n    ...\n  },\n  ...\n]"}]}]},{"block_type":"element","block":"k6r61xlj","search_text":"The result is essentially an array of objects that contain information about each GIF. We’re particularly interested in returnValue[i].images.fixed_width_small.url for each image, which contains the URL to the GIF.","text_count":214,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The result is essentially an array of objects that contain information about each GIF. We&rsquo;re particularly interested in"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"returnValue[i].images.fixed_width_small.url"}]},{"block_type":"text","content":"for each image, which contains the URL to the GIF."}]},{"block_type":"element","block":"k6r61xlk","search_text":"Showing a List of GIFs Using the API’s Response","text_count":47,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Showing a List of GIFs Using the API&rsquo;s Response"}]},{"block_type":"element","block":"k6r61xll","search_text":"In order to show a list of GIFs, we’ll create a getGifViews function that will:","text_count":79,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In order to show a list of GIFs, we&rsquo;ll create a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"getGifViews"}]},{"block_type":"text","content":"function that will:"}]},{"block_type":"element","block":"k6r61xlm","search_text":"create a QWidget container create a QMovie widget for each GIF create a QLabel from each QMovie instance attach each QLabel as a child of the QWidget container return the QWidget container ","text_count":189,"tag_name":"ol","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"create a"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qwidget"},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":"container"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"create a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"widget for each GIF"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"create a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QLabel"}]},{"block_type":"text","content":"from each"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"instance"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"attach each"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QLabel"}]},{"block_type":"text","content":"as a child of the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":"container"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"return the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":"container"}]}]},{"block_type":"element","block":"k6r61xln","search_text":"The code looks like this:","text_count":25,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The code looks like this:"}]},{"block_type":"element","block":"k6r61xlo","search_text":"async function getGifViews(listOfGifs) { const container = new QWidget(); container.setLayout(new FlexLayout()); const promises = listOfGifs.map(async gif => { const { url, width } = gif.images.fixed_width_small; const movie = await getMovie(url); const gifView = new QLabel(); gifView.setMovie(movie); gifView.setInlineStyle(`width: ${width}`); container.layout.addWidget(gifView); }); await Promise.all(promises); container.setInlineStyle(` flex-direction: 'row'; flex-wrap: 'wrap'; justify-content: 'space-around'; width: 330px; height: 300px; `); return container; } ","text_count":571,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"async function getGifViews(listOfGifs) {\n  const container = new QWidget();\n  container.setLayout(new FlexLayout());\n\n  const promises = listOfGifs.map(async gif =&gt; {\n    const { url, width } = gif.images.fixed_width_small;\n    const movie = await getMovie(url);\n    const gifView = new QLabel();\n    gifView.setMovie(movie);\n    gifView.setInlineStyle(`width: ${width}`);\n    container.layout.addWidget(gifView);\n  });\n\n  await Promise.all(promises);\n\n  container.setInlineStyle(`\n      flex-direction: 'row';\n      flex-wrap: 'wrap';\n      justify-content: 'space-around';\n      width: 330px;\n      height: 300px;\n  `);\n\n  return container;\n}"}]}]},{"block_type":"element","block":"k6r61xlp","search_text":"Let’s break this down a bit.","text_count":28,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Let&rsquo;s break this down a bit."}]},{"block_type":"element","block":"k6r61xlq","search_text":"First, we create our container widget. QWidget s are essentially empty widgets that act as containers. They’re similar to <div> elements in the web world.","text_count":154,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"First, we create our container widget."},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":"s are essentially empty widgets that act as containers. They&rsquo;re similar to"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"&lt;div&gt;"}]},{"block_type":"text","content":"elements in the web world."}]},{"block_type":"element","block":"k6r61xlr","search_text":"Next, in order to assign child widgets to the QWidget , we need to give it a layout. A layout dictates how the child widgets should be arranged inside a parent. Here we choose FlexLayout .","text_count":188,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Next, in order to assign child widgets to the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":", we need to give it a layout. A"},{"block_type":"element","tag_name":"strong","attributes":{},"children":[{"block_type":"text","content":"layout"}]},{"block_type":"text","content":"dictates how the child widgets should be arranged inside a parent. Here we choose"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/flexlayout"},"children":[{"block_type":"text","content":"FlexLayout"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xls","search_text":"Then, we use our getMovie function to create a QMovie instance for each GIF URL. We assign the QMovie instance to a QLabel (named gifView ) and give it some basic styling using the setInlineStyle method. Finally, we add the QLabel widget to the container’s layout using the layout.addWidget method.","text_count":298,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Then, we use our"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"getMovie"}]},{"block_type":"text","content":"function to create a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"instance for each GIF URL. We assign the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QMovie"}]},{"block_type":"text","content":"instance to a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QLabel"}]},{"block_type":"text","content":"(named"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"gifView"}]},{"block_type":"text","content":") and give it some basic styling using the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"setInlineStyle"}]},{"block_type":"text","content":"method. Finally, we add the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QLabel"}]},{"block_type":"text","content":"widget to the container&rsquo;s layout using the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"layout.addWidget"}]},{"block_type":"text","content":"method."}]},{"block_type":"element","block":"k6r61xlt","search_text":"Since this is all happening asynchronously, we wait for everything to resolve using Promise.all , before setting some container styles and returning the container widget.","text_count":170,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Since this is all happening asynchronously, we wait for everything to resolve using"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"Promise.all"}]},{"block_type":"text","content":", before setting some container styles and returning the container widget."}]},{"block_type":"element","block":"k6r61xlu","search_text":"Attaching the List to Our Window Widget","text_count":39,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Attaching the List to Our Window Widget"}]},{"block_type":"element","block":"k6r61xlv","search_text":"Now let’s modify our main function in order to see the list of widgets we prepared.","text_count":83,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Now let&rsquo;s modify our"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"main"}]},{"block_type":"text","content":"function in order to see the list of widgets we prepared."}]},{"block_type":"element","block":"k6r61xlw","search_text":"src/index.js","text_count":12,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"src/index.js"}]}]},{"block_type":"element","block":"k6r61xlx","search_text":"const { FlexLayout, QLabel, QMainWindow, QMovie, QWidget } = require('@nodegui/nodegui'); const axios = require('axios').default; const GIPHY_API_KEY = 'Your API key here'; async function getMovie(url) { ... } async function searchGifs(searchTerm) { ... } async function getGifViews(listOfGifs) { ... } const main = async () => { const win = new QMainWindow(); win.setWindowTitle('Meme Search'); const center = new QWidget(); center.setLayout(new FlexLayout()); // We get the list of gifs here const listOfGifs = await searchGifs('hello'); // We create the container with GIF view widgets const container = await getGifViews(listOfGifs); // We finally attach the container to the widget center.layout.addWidget(container); win.setCentralWidget(center); win.show(); global.win = win; }; main().catch(console.error); ","text_count":815,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const { FlexLayout, QLabel, QMainWindow, QMovie, QWidget } = require('@nodegui/nodegui');\nconst axios = require('axios').default;\nconst GIPHY_API_KEY = 'Your API key here';\n\nasync function getMovie(url) { ... }\nasync function searchGifs(searchTerm) { ... }\nasync function getGifViews(listOfGifs) { ... }\n\nconst main = async () =&gt; {\n  const win = new QMainWindow();\n  win.setWindowTitle('Meme Search');\n\n  const center = new QWidget();\n  center.setLayout(new FlexLayout());\n\n  // We get the list of gifs here\n  const listOfGifs = await searchGifs('hello');\n\n  // We create the container with GIF view widgets\n  const container = await getGifViews(listOfGifs);\n\n  // We finally attach the container to the widget\n  center.layout.addWidget(container);\n\n  win.setCentralWidget(center);\n  win.show();\n\n  global.win = win;\n};\n\nmain().catch(console.error);"}]}]},{"block_type":"element","block":"k6r61xly","search_text":"If you run the project after making these changes, you should see:","text_count":66,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If you run the project after making these changes, you should see:"}]},{"block_type":"element","block":"k6r61xlz","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/listofgifs.png","alt":"List of &quot;hello&quot; GIFs pulled from the GIPHY API","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xm0","search_text":"Great! Now, let’s add a search input field along with a button, so that users can search for something other than “hello” GIFs.","text_count":127,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Great! Now, let&rsquo;s add a search input field along with a button, so that users can search for something other than &ldquo;hello&rdquo; GIFs."}]},{"block_type":"element","block":"k6r61xm1","search_text":"Adding a Search Input and Button","text_count":32,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Adding a Search Input and Button"}]},{"block_type":"element","block":"k6r61xm2","search_text":"Let’s start by creating a createSearchContainer function, which will accept a callback function as a parameter. This will be called when the search button is clicked.","text_count":166,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Let&rsquo;s start by creating a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"createSearchContainer"}]},{"block_type":"text","content":"function, which will accept a callback function as a parameter. This will be called when the search button is clicked."}]},{"block_type":"element","block":"k6r61xm3","search_text":"Here’s what the function should do:","text_count":35,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Here&rsquo;s what the function should do:"}]},{"block_type":"element","block":"k6r61xm4","search_text":"create a QWidget container, to which we’ll add a search input field and button as children create a layout and attach it to the container create a search input and button, then attach them to the FlexLayout attach an event listener to the button which, when clicked, will call the onSearch callback function passing it whatever text is present in the text input field return the QWidget container ","text_count":397,"tag_name":"ol","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"create a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":"container, to which we&rsquo;ll add a search input field and button as children"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"create a layout and attach it to the container"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"create a search input and button, then attach them to the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"FlexLayout"}]}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"attach an event listener to the button which, when clicked, will call the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"onSearch"}]},{"block_type":"text","content":"callback function passing it whatever text is present in the text input field"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"return the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":"container"}]}]},{"block_type":"element","block":"k6r61xm5","search_text":"The code looks like this:","text_count":25,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The code looks like this:"}]},{"block_type":"element","block":"k6r61xm6","search_text":"function createSearchContainer(onSearch) { const searchContainer = new QWidget(); searchContainer.setObjectName('searchContainer'); searchContainer.setLayout(new FlexLayout()); const searchInput = new QLineEdit(); searchInput.setObjectName('searchInput'); const searchButton = new QPushButton(); searchButton.setObjectName('searchButton'); searchButton.setText(' 🔎 '); searchButton.addEventListener('clicked', () => { onSearch(searchInput.text()); }); searchContainer.layout.addWidget(searchInput); searchContainer.layout.addWidget(searchButton); searchContainer.setStyleSheet(` #searchContainer { flex-direction: 'row'; padding: 10px; align-items: 'center'; } #searchInput { flex: 1; height: 40px; } #searchButton { margin-left: 5px; width: 50px; height: 35px; } `); return searchContainer; } ","text_count":795,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"function createSearchContainer(onSearch) {\n  const searchContainer = new QWidget();\n  searchContainer.setObjectName('searchContainer');\n  searchContainer.setLayout(new FlexLayout());\n\n  const searchInput = new QLineEdit();\n  searchInput.setObjectName('searchInput');\n\n  const searchButton = new QPushButton();\n  searchButton.setObjectName('searchButton');\n  searchButton.setText(' 🔎 ');\n\n  searchButton.addEventListener('clicked', () =&gt; {\n    onSearch(searchInput.text());\n  });\n\n  searchContainer.layout.addWidget(searchInput);\n  searchContainer.layout.addWidget(searchButton);\n\n  searchContainer.setStyleSheet(`\n    #searchContainer {\n      flex-direction: 'row';\n      padding: 10px;\n      align-items: 'center';\n    }\n    #searchInput {\n      flex: 1;\n      height: 40px;\n    }\n    #searchButton {\n      margin-left: 5px;\n      width: 50px;\n      height: 35px;\n    }\n  `);\n  return searchContainer;\n}"}]}]},{"block_type":"element","block":"k6r61xm7","search_text":"Hopefully you have a fair idea of what’s going on here, but one new thing to notice is the setStyleSheet method . You can think of this as a way to apply block-level CSS in one go. It’s very similar to global stylesheets on the Web, but with the difference that in NodeGui/Qt a stylesheet can be attached to any block and not just globally.","text_count":340,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Hopefully you have a fair idea of what&rsquo;s going on here, but one new thing to notice is the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qwidget#setstylesheet"},"children":[{"block_type":"text","content":"setStyleSheet method"}]},{"block_type":"text","content":". You can think of this as a way to apply block-level CSS in one go. It&rsquo;s very similar to global stylesheets on the Web, but with the difference that in NodeGui/Qt a stylesheet can be attached to any block and not just globally."}]},{"block_type":"element","block":"k6r61xm8","search_text":"In order to style a widget using a stylesheet, we need to add an objectName to a widget, which we’ll use to reference it in the stylesheet. This is pretty much identical to an id in the web world. In order to set an objectName , we’ll use the setObjectName method.","text_count":264,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In order to style a widget using a stylesheet, we need to add an"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"objectName"}]},{"block_type":"text","content":"to a widget, which we&rsquo;ll use to reference it in the stylesheet. This is pretty much identical to an"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"id"}]},{"block_type":"text","content":"in the web world. In order to set an"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"objectName"}]},{"block_type":"text","content":", we&rsquo;ll use the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"setObjectName"}]},{"block_type":"text","content":"method."}]},{"block_type":"element","block":"k6r61xm9","search_text":"Now let’s add this searchContainer to the main window.","text_count":54,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Now let&rsquo;s add this"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"searchContainer"}]},{"block_type":"text","content":"to the main window."}]},{"block_type":"element","block":"k6r61xma","search_text":"src/index.js","text_count":12,"tag_name":"p","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"src/index.js"}]}]},{"block_type":"element","block":"k6r61xmb","search_text":"const { FlexLayout, QLabel, QLineEdit, QMainWindow, QMovie, QPushButton, QWidget, } = require('@nodegui/nodegui'); const axios = require('axios').default; const GIPHY_API_KEY = 'Your API key here'; async function getMovie(url) { ... } async function searchGifs(searchTerm) { ... } async function getGifViews(listOfGifs) { ... } function createSearchContainer(onSearch) { ... } const main = async () => { const win = new QMainWindow(); win.setWindowTitle('Meme Search'); const center = new QWidget(); center.setLayout(new FlexLayout()); // Here we create the search container const searchContainer = createSearchContainer(searchText => { console.log('searchText: ', searchText); }); // Here we add it to the center widget before we add the list of GIFs. center.layout.addWidget(searchContainer); const listOfGifs = await searchGifs('hello'); const container = await getGifViews(listOfGifs); center.layout.addWidget(container); win.setCentralWidget(center); win.show(); global.win = win; }; main().catch(console.error); ","text_count":1018,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const {\n  FlexLayout,\n  QLabel,\n  QLineEdit,\n  QMainWindow,\n  QMovie,\n  QPushButton,\n  QWidget,\n} = require('@nodegui/nodegui');\n\nconst axios = require('axios').default;\nconst GIPHY_API_KEY = 'Your API key here';\n\nasync function getMovie(url) { ... }\nasync function searchGifs(searchTerm) { ... }\nasync function getGifViews(listOfGifs) { ... }\nfunction createSearchContainer(onSearch) { ... }\n\nconst main = async () =&gt; {\n  const win = new QMainWindow();\n  win.setWindowTitle('Meme Search');\n\n  const center = new QWidget();\n  center.setLayout(new FlexLayout());\n\n  // Here we create the search container\n  const searchContainer = createSearchContainer(searchText =&gt; {\n    console.log('searchText: ', searchText);\n  });\n\n  // Here we add it to the center widget before we add the list of GIFs.\n  center.layout.addWidget(searchContainer);\n\n  const listOfGifs = await searchGifs('hello');\n  const container = await getGifViews(listOfGifs);\n\n  center.layout.addWidget(container);\n\n  win.setCentralWidget(center);\n  win.show();\n\n  global.win = win;\n};\n\nmain().catch(console.error);"}]}]},{"block_type":"element","block":"k6r61xmc","search_text":"Now, when you launch the app and enter something in the search field, you should see whatever you searched for logged to your terminal.","text_count":135,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Now, when you launch the app and enter something in the search field, you should see whatever you searched for logged to your terminal."}]},{"block_type":"element","block":"k6r61xmd","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/searchbar.gif","alt":"List of GIFs with search input","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xme","search_text":"Connecting the Search to the GIF View","text_count":37,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Connecting the Search to the GIF View"}]},{"block_type":"element","block":"k6r61xmf","search_text":"In order to load new GIFs in response to a user’s search, we need to do the following:","text_count":86,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In order to load new GIFs in response to a user&rsquo;s search, we need to do the following:"}]},{"block_type":"element","block":"k6r61xmg","search_text":"Inside the callback that’s fired when the search button is clicked, grab the search text and use searchGifs function to get a new list of GIFs. Create a new container for these GIFs using the getGifViews function. Remove the existing container from the window. Add the new container to the window. ","text_count":298,"tag_name":"ol","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"Inside the callback that&rsquo;s fired when the search button is clicked, grab the search text and use"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"searchGifs"}]},{"block_type":"text","content":"function to get a new list of GIFs."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"Create a new container for these GIFs using the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"getGifViews"}]},{"block_type":"text","content":"function."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"Remove the existing container from the window."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"Add the new container to the window."}]}]},{"block_type":"element","block":"k6r61xmh","search_text":"If we shuffle things around a little, we get:","text_count":45,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If we shuffle things around a little, we get:"}]},{"block_type":"element","block":"k6r61xmi","search_text":"const main = async () => { const win = new QMainWindow(); win.setWindowTitle('Meme Search'); const center = new QWidget(); center.setLayout(new FlexLayout()); let container = new QWidget(); const searchContainer = createSearchContainer(async searchText => { try { // Create a new GIF container with new GIFs const listOfGifs = await searchGifs(searchText); const newGifContainer = await getGifViews(listOfGifs); // Remove existing container from the window center.layout.removeWidget(container); container.close(); // Add the new GIF container to the window center.layout.addWidget(newGifContainer); container = newGifContainer; } catch (err) { console.error('Something happened!', err); } }); center.layout.addWidget(searchContainer); win.setCentralWidget(center); win.show(); global.win = win; }; ","text_count":799,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const main = async () =&gt; {\n  const win = new QMainWindow();\n  win.setWindowTitle('Meme Search');\n\n  const center = new QWidget();\n  center.setLayout(new FlexLayout());\n\n  let container = new QWidget();\n  const searchContainer = createSearchContainer(async searchText =&gt; {\n    try {\n      // Create a new GIF container with new GIFs\n      const listOfGifs = await searchGifs(searchText);\n      const newGifContainer = await getGifViews(listOfGifs);\n\n      // Remove existing container from the window\n      center.layout.removeWidget(container);\n      container.close();\n\n      // Add the new GIF container to the window\n      center.layout.addWidget(newGifContainer);\n      container = newGifContainer;\n    } catch (err) {\n      console.error('Something happened!', err);\n    }\n  });\n  center.layout.addWidget(searchContainer);\n\n  win.setCentralWidget(center);\n  win.show();\n\n  global.win = win;\n};"}]}]},{"block_type":"element","block":"k6r61xmj","search_text":"Let’s run it again and see the magic 🧙‍♂️.","text_count":43,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Let&rsquo;s run it again and see the magic 🧙&zwj;♂️."}]},{"block_type":"element","block":"k6r61xmk","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/search-connected.gif","alt":"Connected GIF search widget","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xml","search_text":"As you can see, when you type something into the search box and hit the search button, our widget will fetch a list of GIFs matching the search term from the GIPHY API.","text_count":168,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"As you can see, when you type something into the search box and hit the search button, our widget will fetch a list of GIFs matching the search term from the GIPHY API."}]},{"block_type":"element","block":"k6r61xmm","search_text":"Using QScrollArea to Make the List of GIFs Scrollable","text_count":53,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Using QScrollArea to Make the List of GIFs Scrollable"}]},{"block_type":"element","block":"k6r61xmn","search_text":"While this is all moving in the right direction, you have probably noticed that the list of GIFs are cut off at the bottom and there’s no way to scroll them. This is because we’re using a QWidget container to display them. To make the container scrollable, we need to swap the QWidget for a QScrollArea . This provides a scrolling view onto another widget.","text_count":356,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"While this is all moving in the right direction, you have probably noticed that the list of GIFs are cut off at the bottom and there&rsquo;s no way to scroll them. This is because we&rsquo;re using a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":"container to display them. To make the container scrollable, we need to swap the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QWidget"}]},{"block_type":"text","content":"for a"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qscrollarea/"},"children":[{"block_type":"text","content":"QScrollArea"}]},{"block_type":"text","content":". This provides a scrolling view onto another widget."}]},{"block_type":"element","block":"k6r61xmo","search_text":"We’ll start off by removing the height property in the getGifViews function:","text_count":76,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We&rsquo;ll start off by removing the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"height"}]},{"block_type":"text","content":"property in the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"getGifViews"}]},{"block_type":"text","content":"function:"}]},{"block_type":"element","block":"k6r61xmp","search_text":"async function getGifViews(listOfGifs) { ... container.setInlineStyle(` flex-direction: 'row'; flex-wrap: 'wrap'; justify-content: 'space-around'; width: 330px; - height: 300px; `); return container; } ","text_count":202,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"async function getGifViews(listOfGifs) {\n  ...\n\n  container.setInlineStyle(`\n      flex-direction: 'row';\n      flex-wrap: 'wrap';\n      justify-content: 'space-around';\n      width: 330px;\n-     height: 300px;\n  `);\n\n  return container;\n}"}]}]},{"block_type":"element","block":"k6r61xmq","search_text":"Then we need to change src/index.js to look like this:","text_count":54,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Then we need to change"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"src/index.js"}]},{"block_type":"text","content":"to look like this:"}]},{"block_type":"element","block":"k6r61xmr","search_text":"const { FlexLayout, QLabel, QLineEdit, QMainWindow, QMovie, QPushButton, QScrollArea, QWidget, } = require('@nodegui/nodegui'); const axios = require('axios').default; const GIPHY_API_KEY = 'Your API key here'; async function getMovie(url) { ... } async function searchGifs(searchTerm) { ... } async function getGifViews(listOfGifs) { ... } function createSearchContainer(onSearch) { ... } const main = async () => { const win = new QMainWindow(); win.setWindowTitle('Meme Search'); const center = new QWidget(); center.setLayout(new FlexLayout()); const scrollArea = new QScrollArea(); scrollArea.setWidgetResizable(false); scrollArea.setInlineStyle('flex: 1; width: 350px; height: 400px;'); const searchContainer = createSearchContainer(async searchText => { try { const listOfGifs = await searchGifs(searchText); const newGifContainer = await getGifViews(listOfGifs); // Remove existing container from the scrollArea const oldContainer = scrollArea.takeWidget(); if (oldContainer) oldContainer.close(); // Add the new GIF container to the scrollArea scrollArea.setWidget(newGifContainer); } catch (err) { console.error('Something happened!', err); } }); center.layout.addWidget(searchContainer); center.layout.addWidget(scrollArea); win.setCentralWidget(center); win.show(); global.win = win; }; main().catch(console.error); ","text_count":1328,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const {\n  FlexLayout,\n  QLabel,\n  QLineEdit,\n  QMainWindow,\n  QMovie,\n  QPushButton,\n  QScrollArea,\n  QWidget,\n} = require('@nodegui/nodegui');\n\nconst axios = require('axios').default;\nconst GIPHY_API_KEY = 'Your API key here';\n\nasync function getMovie(url) { ... }\nasync function searchGifs(searchTerm) { ... }\nasync function getGifViews(listOfGifs) { ... }\nfunction createSearchContainer(onSearch) { ... }\n\nconst main = async () =&gt; {\n  const win = new QMainWindow();\n  win.setWindowTitle('Meme Search');\n\n  const center = new QWidget();\n  center.setLayout(new FlexLayout());\n\n  const scrollArea = new QScrollArea();\n  scrollArea.setWidgetResizable(false);\n  scrollArea.setInlineStyle('flex: 1; width: 350px; height: 400px;');\n\n  const searchContainer = createSearchContainer(async searchText =&gt; {\n    try {\n      const listOfGifs = await searchGifs(searchText);\n      const newGifContainer = await getGifViews(listOfGifs);\n\n      // Remove existing container from the scrollArea\n      const oldContainer = scrollArea.takeWidget();\n      if (oldContainer) oldContainer.close();\n\n      // Add the new GIF container to the scrollArea\n      scrollArea.setWidget(newGifContainer);\n    } catch (err) {\n      console.error('Something happened!', err);\n    }\n  });\n\n  center.layout.addWidget(searchContainer);\n  center.layout.addWidget(scrollArea);\n\n  win.setCentralWidget(center);\n  win.show();\n\n  global.win = win;\n};\n\nmain().catch(console.error);"}]}]},{"block_type":"element","block":"k6r61xms","search_text":"There’s nothing too exciting going on here. We’re creating a new QScrollArea , which we add to the layout beneath the search field. We’re also using the QScrollArea ’s takeWidget method to remove any existing container from the scroll area, before appending the new search results.","text_count":281,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"There&rsquo;s nothing too exciting going on here. We&rsquo;re creating a new"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QScrollArea"}]},{"block_type":"text","content":", which we add to the layout beneath the search field. We&rsquo;re also using the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QScrollArea"}]},{"block_type":"text","content":"&rsquo;s"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qscrollarea#takewidget"},"children":[{"block_type":"text","content":"takeWidget method"}]},{"block_type":"text","content":"to remove any existing container from the scroll area, before appending the new search results."}]},{"block_type":"element","block":"k6r61xmt","search_text":"If you launch the meme searcher, you should now have scrollable GIFs:","text_count":69,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If you launch the meme searcher, you should now have scrollable GIFs:"}]},{"block_type":"element","block":"k6r61xmu","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/scrollable.gif","alt":"Scrollable search","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xmv","search_text":"Add Click Listeners to Copy GIF URLs for Sharing","text_count":48,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Add Click Listeners to Copy GIF URLs for Sharing"}]},{"block_type":"element","block":"k6r61xmw","search_text":"Now that we can see all the GIFs, we want to be able to share them. One quick way to do this is to copy the URL onto the global clipboard whenever a user clicks on the GIF of their choice.","text_count":188,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Now that we can see all the GIFs, we want to be able to share them. One quick way to do this is to copy the URL onto the global clipboard whenever a user clicks on the GIF of their choice."}]},{"block_type":"element","block":"k6r61xmx","search_text":"Then the user can simply navigate to the place they want to use the GIF and insert it with Ctrl / Cmd + V .","text_count":107,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Then the user can simply navigate to the place they want to use the GIF and insert it with"},{"block_type":"element","tag_name":"kbd","attributes":{},"children":[{"block_type":"text","content":"Ctrl"}]},{"block_type":"text","content":"/"},{"block_type":"element","tag_name":"kbd","attributes":{},"children":[{"block_type":"text","content":"Cmd"}]},{"block_type":"text","content":"+"},{"block_type":"element","tag_name":"kbd","attributes":{},"children":[{"block_type":"text","content":"V"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xmy","search_text":"In order to do that, we must:","text_count":29,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In order to do that, we must:"}]},{"block_type":"element","block":"k6r61xmz","search_text":"attach a mouse-down event listener to each GIF inside the event listener callback, use the QClipboard class to copy the URL to the global clipboard show a modal to the user saying that the URL has been copied ","text_count":209,"tag_name":"ol","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"attach a mouse-down event listener to each GIF"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"inside the event listener callback, use the"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qclipboard"},"children":[{"block_type":"text","content":"QClipboard class"}]},{"block_type":"text","content":"to copy the URL to the global clipboard"}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"show a modal to the user saying that the URL has been copied"}]}]},{"block_type":"element","block":"k6r61xn0","search_text":"The event listener can be attached inside the getGifViews function:","text_count":67,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The event listener can be attached inside the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"getGifViews"}]},{"block_type":"text","content":"function:"}]},{"block_type":"element","block":"k6r61xn1","search_text":"async function getGifViews(listOfGifs) { ... const promises = listOfGifs.map(async gif => { ... gifView.addEventListener(WidgetEventTypes.MouseButtonRelease, () => { const clipboard = QApplication.clipboard(); clipboard.setText(url, QClipboardMode.Clipboard); showModal( 'Copied to clipboard!', `You can press Cmd/Ctrl + V to paste the GIF url: ${url}` ); }); container.layout.addWidget(gifView); }); ... return container; } ","text_count":425,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"async function getGifViews(listOfGifs) {\n  ...\n\n  const promises = listOfGifs.map(async gif =&gt; {\n    ...\n\n    gifView.addEventListener(WidgetEventTypes.MouseButtonRelease, () =&gt; {\n      const clipboard = QApplication.clipboard();\n      clipboard.setText(url, QClipboardMode.Clipboard);\n\n      showModal(\n        'Copied to clipboard!',\n        `You can press Cmd/Ctrl + V to paste the GIF url: ${url}`\n      );\n\n    });\n\n    container.layout.addWidget(gifView);\n  });\n\n  ...\n\n  return container;\n}"}]}]},{"block_type":"element","block":"k6r61xn2","search_text":"Here, QApplication.clipboard returns an object for interacting with the clipboard. We can use this object’s setText method to alter the actual clipboard’s contents.","text_count":164,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Here,"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qapplication#static-clipboard"},"children":[{"block_type":"text","content":"QApplication.clipboard"}]},{"block_type":"text","content":"returns an object for interacting with the clipboard. We can use this object&rsquo;s"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"setText"}]},{"block_type":"text","content":"method to alter the actual clipboard&rsquo;s contents."}]},{"block_type":"element","block":"k6r61xn3","search_text":"We’re also making use of a showModal function. Let’s define that next:","text_count":70,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We&rsquo;re also making use of a"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"showModal"}]},{"block_type":"text","content":"function. Let&rsquo;s define that next:"}]},{"block_type":"element","block":"k6r61xn4","search_text":"function showModal(title, details) { const modal = new QMessageBox(); modal.setText(title); modal.setDetailedText(details); const okButton = new QPushButton(); okButton.setText('OK'); modal.addButton(okButton, ButtonRole.AcceptRole); modal.exec(); } ","text_count":250,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"function showModal(title, details) {\n  const modal = new QMessageBox();\n  modal.setText(title);\n  modal.setDetailedText(details);\n  const okButton = new QPushButton();\n  okButton.setText('OK');\n  modal.addButton(okButton, ButtonRole.AcceptRole);\n  modal.exec();\n}"}]}]},{"block_type":"element","block":"k6r61xn5","search_text":"The QMessageBox widget is similar to an alert box in a web browser. It can be used to halt user interaction and display a message.","text_count":130,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qmessagebox/"},"children":[{"block_type":"text","content":"QMessageBox widget"}]},{"block_type":"text","content":"is similar to an alert box in a web browser. It can be used to halt user interaction and display a message."}]},{"block_type":"element","block":"k6r61xn6","search_text":"Finally, we need to import all of these new widgets at the top of src/index.js :","text_count":80,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Finally, we need to import all of these new widgets at the top of"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"src/index.js"}]},{"block_type":"text","content":":"}]},{"block_type":"element","block":"k6r61xn7","search_text":"const { ButtonRole, FlexLayout, QApplication, QClipboardMode, QLabel, QLineEdit, QMainWindow, QMessageBox, QMovie, QPushButton, QScrollArea, QWidget, WidgetEventTypes, } = require('@nodegui/nodegui'); const axios = require('axios').default; const GIPHY_API_KEY = 'Your API key here'; async function searchGifs(searchTerm) { ... }; async function getGifViews(listOfGifs) { ... }; async function getMovie(url) { ... }; function createSearchContainer(onSearch) { ... }; function showModal(title, details) { ... }; const main = async () => { ... }; main().catch(console.error); ","text_count":574,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const {\n  ButtonRole,\n  FlexLayout,\n  QApplication,\n  QClipboardMode,\n  QLabel,\n  QLineEdit,\n  QMainWindow,\n  QMessageBox,\n  QMovie,\n  QPushButton,\n  QScrollArea,\n  QWidget,\n  WidgetEventTypes,\n} = require('@nodegui/nodegui');\nconst axios = require('axios').default;\nconst GIPHY_API_KEY =  'Your API key here';\n\nasync function searchGifs(searchTerm) { ... };\nasync function getGifViews(listOfGifs) { ... };\nasync function getMovie(url) { ... };\nfunction createSearchContainer(onSearch) { ... };\nfunction showModal(title, details) { ... };\n\nconst main = async () =&gt; { ... };\n\nmain().catch(console.error);"}]}]},{"block_type":"element","block":"k6r61xn8","search_text":"If you launch the meme searcher, you should now have the ability to copy/paste GIF URLs:","text_count":88,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"If you launch the meme searcher, you should now have the ability to copy/paste GIF URLs:"}]},{"block_type":"element","block":"k6r61xn9","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/clipboard.gif","alt":"Copy GIF URL to clipboard GIF","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xna","search_text":"Adding a System Tray Icon","text_count":25,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Adding a System Tray Icon"}]},{"block_type":"element","block":"k6r61xnb","search_text":"We want our app to be hidden away in the system tray when not in use. For this, we’ll create a system tray icon that will have a menu item which, upon click, will toggle the visibility of the running widget.","text_count":207,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"We want our app to be hidden away in the system tray when not in use. For this, we&rsquo;ll create a system tray icon that will have a menu item which, upon click, will toggle the visibility of the running widget."}]},{"block_type":"element","block":"k6r61xnc","search_text":"The steps involved are:","text_count":23,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The steps involved are:"}]},{"block_type":"element","block":"k6r61xnd","search_text":"Create a QSystemTrayIcon with an icon. Create a menu for the system tray icon using QMenu . Set the menu instance as system tray’s context menu. Create menu items using QAction widgets and set up event listeners to listen for their trigger events. On trigger, hide or show the window. ","text_count":285,"tag_name":"ol","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"Create a"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qsystemtrayicon"},"children":[{"block_type":"text","content":"QSystemTrayIcon"}]},{"block_type":"text","content":"with an icon."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"Create a menu for the system tray icon using"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qmenu"},"children":[{"block_type":"text","content":"QMenu"}]},{"block_type":"text","content":". Set the menu instance as system tray&rsquo;s context menu."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"Create menu items using"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qaction"},"children":[{"block_type":"text","content":"QAction widgets"}]},{"block_type":"text","content":"and set up event listeners to listen for their"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"trigger"}]},{"block_type":"text","content":"events."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"On trigger, hide or show the window."}]}]},{"block_type":"element","block":"k6r61xne","search_text":"Let’s start off by requiring the necessary modules, then making a small change to the main function to tell it to use our icon:","text_count":127,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Let&rsquo;s start off by requiring the necessary modules, then making a small change to the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"main"}]},{"block_type":"text","content":"function to tell it to use our icon:"}]},{"block_type":"element","block":"k6r61xnf","search_text":"const { ButtonRole, FlexLayout, QApplication, QClipboardMode, QIcon, QLabel, QLineEdit, QMainWindow, QMenu, QMessageBox, QMovie, QAction, QPushButton, QScrollArea, QSystemTrayIcon, QWidget, WidgetEventTypes, } = require('@nodegui/nodegui'); const axios = require('axios').default; const path = require('path'); const iconImg = require('../assets/systray.png').default; const GIPHY_API_KEY = 'Your API key here'; const main = async () => { ... win.show(); systemTrayIcon(win); global.win = win; }; ","text_count":497,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const {\n  ButtonRole,\n  FlexLayout,\n  QApplication,\n  QClipboardMode,\n  QIcon,\n  QLabel,\n  QLineEdit,\n  QMainWindow,\n  QMenu,\n  QMessageBox,\n  QMovie,\n  QAction,\n  QPushButton,\n  QScrollArea,\n  QSystemTrayIcon,\n  QWidget,\n  WidgetEventTypes,\n} = require('@nodegui/nodegui');\nconst axios = require('axios').default;\nconst path = require('path');\nconst iconImg = require('../assets/systray.png').default;\nconst GIPHY_API_KEY =  'Your API key here';\n\nconst main = async () =&gt; {\n  ...\n\n  win.show();\n  systemTrayIcon(win);\n\n  global.win = win;\n};"}]}]},{"block_type":"element","block":"k6r61xng","search_text":"As you can see, we’re requiring an icon from the assets folder. If you’re following along, you can download the icon file from here .","text_count":133,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"As you can see, we&rsquo;re requiring an icon from the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"assets"}]},{"block_type":"text","content":"folder. If you&rsquo;re following along, you can"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/sitepoint-editors/memesearchapp-nodegui-tutorial/blob/master/assets/systray.png"},"children":[{"block_type":"text","content":"download the icon file from here"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xnh","search_text":"Now comes the function to create the system tray icon:","text_count":54,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Now comes the function to create the system tray icon:"}]},{"block_type":"element","block":"k6r61xni","search_text":"function systemTrayIcon(win) { const icon = new QIcon(path.resolve(__dirname, iconImg)); const tray = new QSystemTrayIcon(); tray.setIcon(icon); tray.show(); // Menu that should pop up when clicking on systray icon. const menu = new QMenu(); tray.setContextMenu(menu); //Each item in the menu is called an action const visibleAction = new QAction(); menu.addAction(visibleAction); visibleAction.setText('Show/Hide'); visibleAction.addEventListener('triggered', () => { if (win.isVisible()) { win.hide(); } else { win.show(); } }); global.tray = tray; } ","text_count":553,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"function systemTrayIcon(win) {\n  const icon = new QIcon(path.resolve(__dirname, iconImg));\n  const tray = new QSystemTrayIcon();\n  tray.setIcon(icon);\n  tray.show();\n\n  // Menu that should pop up when clicking on systray icon.\n  const menu = new QMenu();\n  tray.setContextMenu(menu);\n\n  //Each item in the menu is called an action\n  const visibleAction = new QAction();\n  menu.addAction(visibleAction);\n  visibleAction.setText('Show/Hide');\n  visibleAction.addEventListener('triggered', () =&gt; {\n    if (win.isVisible()) {\n      win.hide();\n    } else {\n      win.show();\n    }\n  });\n\n  global.tray = tray;\n}"}]}]},{"block_type":"element","block":"k6r61xnj","search_text":"Here, we’re creating the icon using NodeGui’s QIcon class . Then we’re using the QSystemTrayIcon to create a system tray icon for our app.","text_count":138,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Here, we&rsquo;re creating the icon using NodeGui&rsquo;s"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qicon/"},"children":[{"block_type":"text","content":"QIcon class"}]},{"block_type":"text","content":". Then we&rsquo;re using the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QSystemTrayIcon"}]},{"block_type":"text","content":"to create a system tray icon for our app."}]},{"block_type":"element","block":"k6r61xnk","search_text":"Finally, we need to tweak our webpack settings (in webpack.config.js ) to prevent webpack from polyfilling __dirname :","text_count":118,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Finally, we need to tweak our webpack settings (in"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"webpack.config.js"}]},{"block_type":"text","content":") to prevent webpack from polyfilling"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"__dirname"}]},{"block_type":"text","content":":"}]},{"block_type":"element","block":"k6r61xnl","search_text":"const path = require('path'); module.exports = { ... node: { - __dirname: true, - __filename: true + __dirname: false, + __filename: false }, ... } ","text_count":148,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const path = require('path');\n\nmodule.exports = {\n  ...\n  node: {\n-    __dirname: true,\n-    __filename: true\n+    __dirname: false,\n+    __filename: false\n  },\n  ...\n}"}]}]},{"block_type":"element","block":"k6r61xnm","search_text":"The final result:","text_count":17,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The final result:"}]},{"block_type":"element","block":"k6r61xnn","search_text":"","text_count":0,"tag_name":"p","attributes":{"class":"f-center"},"children":[{"block_type":"element","tag_name":"img","attributes":{"src":"https://learnable-static.s3.amazonaws.com/premium/reeedr/books/build-a-native-desktop-gif-search-app-using-nodegui/images/final.gif","alt":"The final search widget","class":"lazyload"},"children":[]}]},{"block_type":"element","block":"k6r61xno","search_text":"Some Final Tweaks","text_count":17,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Some Final Tweaks"}]},{"block_type":"element","block":"k6r61xnp","search_text":"Error Handling","text_count":14,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Error Handling"}]},{"block_type":"element","block":"k6r61xnq","search_text":"Before we go on to packaging, let’s make use of our showModal function and add an error-handling dialog:","text_count":104,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Before we go on to packaging, let&rsquo;s make use of our"},{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"showModal"}]},{"block_type":"text","content":"function and add an error-handling dialog:"}]},{"block_type":"element","block":"k6r61xnr","search_text":"const main = async () => { ... const searchContainer = createSearchContainer(async searchText => { try { ... } catch (err) { ... showModal('Something went wrong!', JSON.stringify(err)); } }); ... }; ","text_count":199,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const main = async () =&gt; {\n  ...\n  const searchContainer = createSearchContainer(async searchText =&gt; {\n    try {\n      ...\n    } catch (err) {\n      ...\n      showModal('Something went wrong!', JSON.stringify(err));\n    }\n  });\n  ...\n};"}]}]},{"block_type":"element","block":"k6r61xns","search_text":"This will alert the user if, for instance, anything goes wrong with the Ajax request to fetch GIFs from GIPHY. You can try this out by altering your API key to something invalid, then launching the app and attempting to search for a GIF.","text_count":237,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This will alert the user if, for instance, anything goes wrong with the Ajax request to fetch GIFs from GIPHY. You can try this out by altering your API key to something invalid, then launching the app and attempting to search for a GIF."}]},{"block_type":"element","block":"k6r61xnt","search_text":"Allow the User to Input an API Key","text_count":34,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Allow the User to Input an API Key"}]},{"block_type":"element","block":"k6r61xnu","search_text":"While we are on the subject of API keys, let’s add a dialog to allow a user to input their API key. This means that it doesn’t have to be hard-coded in the program:","text_count":164,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"While we are on the subject of API keys, let&rsquo;s add a dialog to allow a user to input their API key. This means that it doesn&rsquo;t have to be hard-coded in the program:"}]},{"block_type":"element","block":"k6r61xnv","search_text":"const { ... QDialog, ... } = require('@nodegui/nodegui'); ... let GIPHY_API_KEY = ''; async function searchGifs(searchTerm) { ... } async function getGifViews(listOfGifs) { ... } async function getMovie(url) { ... } function createSearchContainer(onSearch) { ... } function showModal(title, details) { ... } function systemTrayIcon(win) { ... } function showAPIKeyDialog() { const dialog = new QDialog(); dialog.setLayout(new FlexLayout()); const label = new QLabel(); label.setText('Enter your Giphy API Key'); const input = new QLineEdit(); const okButton = new QPushButton(); okButton.setText('OK'); okButton.addEventListener('clicked', () => { GIPHY_API_KEY = input.text(); dialog.close(); }); dialog.layout.addWidget(label); dialog.layout.addWidget(input); dialog.layout.addWidget(okButton); dialog.setInlineStyle(` padding: 10; height: 150px; flex-direction: 'column'; align-items:'center'; justify-content: 'space-around'; `); dialog.exec(); } const main = async () => { ... showAPIKeyDialog(); global.win = win; }; main().catch(console.error); ","text_count":1052,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"const {\n  ...\n  QDialog,\n  ...\n} = require('@nodegui/nodegui');\n...\nlet GIPHY_API_KEY = '';\n\nasync function searchGifs(searchTerm) { ... }\nasync function getGifViews(listOfGifs) { ... }\nasync function getMovie(url) { ... }\nfunction createSearchContainer(onSearch) { ... }\nfunction showModal(title, details) { ... }\nfunction systemTrayIcon(win) { ... }\n\nfunction showAPIKeyDialog() {\n  const dialog = new QDialog();\n  dialog.setLayout(new FlexLayout());\n  const label = new QLabel();\n  label.setText('Enter your Giphy API Key');\n  const input = new QLineEdit();\n  const okButton = new QPushButton();\n  okButton.setText('OK');\n  okButton.addEventListener('clicked', () =&gt; {\n    GIPHY_API_KEY = input.text();\n    dialog.close();\n  });\n  dialog.layout.addWidget(label);\n  dialog.layout.addWidget(input);\n  dialog.layout.addWidget(okButton);\n  dialog.setInlineStyle(`\n    padding: 10;\n    height: 150px;\n    flex-direction: 'column';\n    align-items:'center';\n    justify-content: 'space-around';\n  `);\n  dialog.exec();\n}\n\nconst main = async () =&gt; {\n  ...\n  showAPIKeyDialog();\n  global.win = win;\n};\n\nmain().catch(console.error);"}]}]},{"block_type":"element","block":"k6r61xnw","search_text":"As you can see, we’re using a QDialog widget to prompt the user for input, then storing whatever they provide in the GIPHY_API_KEY variable. If you’re looking to improve your NodeGui skills after reading this tutorial, you could look at improving this—for example, by persisting the key to the file system, or validating it and providing feedback to the user.","text_count":359,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"As you can see, we&rsquo;re using a"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qdialog"},"children":[]},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"QDialog"}]},{"block_type":"element","tag_name":"a","attributes":{"href":"https://docs.nodegui.org/docs/api/generated/classes/qdialog"},"children":[{"block_type":"text","content":"widget"}]},{"block_type":"text","content":"to prompt the user for input, then storing whatever they provide in the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"GIPHY_API_KEY"}]},{"block_type":"text","content":"variable. If you&rsquo;re looking to improve your NodeGui skills after reading this tutorial, you could look at improving this&mdash;for example, by persisting the key to the file system, or validating it and providing feedback to the user."}]},{"block_type":"element","block":"k6r61xnx","search_text":"Project Source Code","text_count":19,"tag_name":"h4","attributes":{},"children":[{"block_type":"text","content":"Project Source Code"}]},{"block_type":"element","block":"k6r61xny","search_text":"Don’t forget, the complete source code is available on GitHub .","text_count":63,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Don&rsquo;t forget, the complete source code is available"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/sitepoint-editors/memesearchapp-nodegui-tutorial"},"children":[{"block_type":"text","content":"on GitHub"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xnz","search_text":"Packaging the App for Cross-platform Distribution","text_count":49,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Packaging the App for Cross-platform Distribution"}]},{"block_type":"element","block":"k6r61xo0","search_text":"After we’ve successfully built the app, we need to create distributables for macOS, Windows and Linux that the end users can download and use.","text_count":142,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"After we&rsquo;ve successfully built the app, we need to create distributables for macOS, Windows and Linux that the end users can download and use."}]},{"block_type":"element","block":"k6r61xo1","search_text":"The process of creating distributables is usually different for each operating system, so to ease the pain we’ll use NodeGui’s packaging tool called @nodegui/packer .","text_count":166,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The process of creating distributables is usually different for each operating system, so to ease the pain we&rsquo;ll use NodeGui&rsquo;s packaging tool called"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"@nodegui/packer"}]},{"block_type":"text","content":"."}]},{"block_type":"element","block":"k6r61xo2","search_text":"Usage","text_count":5,"tag_name":"h3","attributes":{},"children":[{"block_type":"text","content":"Usage"}]},{"block_type":"element","block":"k6r61xo3","search_text":"First, install packer as a dev dependency:","text_count":42,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"First, install packer as a dev dependency:"}]},{"block_type":"element","block":"k6r61xo4","search_text":"npm install --save-dev @nodegui/packer ","text_count":39,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"npm install --save-dev @nodegui/packer"}]}]},{"block_type":"element","block":"k6r61xo5","search_text":"Next, use packer to create a deployment template:","text_count":49,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Next, use packer to create a deployment template:"}]},{"block_type":"element","block":"k6r61xo6","search_text":"npx nodegui-packer --init MemeApp ","text_count":34,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"npx nodegui-packer --init MemeApp"}]}]},{"block_type":"element","block":"k6r61xo7","search_text":"The template is essentially an OS-specific project that contains the code to successfully package all of NodeGui app’s code, assets and dependencies. Note that you need to run this in Windows, macOS and Linux separately to create three different templates. This template allows you to fine tune the final deployment settings specific to each OS. You can adjust things like company info, icons and other metadata to suit your needs.","text_count":431,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The template is essentially an OS-specific project that contains the code to successfully package all of NodeGui app&rsquo;s code, assets and dependencies. Note that you need to run this in Windows, macOS and Linux separately to create three different templates. This template allows you to fine tune the final deployment settings specific to each OS. You can adjust things like company info, icons and other metadata to suit your needs."}]},{"block_type":"element","block":"k6r61xo8","search_text":"For Linux, the template looks like this:","text_count":40,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"For Linux, the template looks like this:"}]},{"block_type":"element","block":"k6r61xo9","search_text":". └── deploy ├── config.json └── linux └── MemeApp ├── default.desktop ├── default.png └── qode.json ","text_count":101,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":".\n└── deploy\n    ├── config.json\n    └── linux\n        └── MemeApp\n            ├── default.desktop\n            ├── default.png\n            └── qode.json"}]}]},{"block_type":"element","block":"k6r61xoa","search_text":"Note that you only need to run the init command once . Then you make changes to the template and commit it in the project repo.","text_count":127,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Note that you only need to run the init command"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"once"}]},{"block_type":"text","content":". Then you make changes to the template and commit it in the project repo."}]},{"block_type":"element","block":"k6r61xob","search_text":"The next step is to actually build and package the project into a distributable.","text_count":80,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The next step is to actually build and package the project into a distributable."}]},{"block_type":"element","block":"k6r61xoc","search_text":"Delete the build directory if it exists:","text_count":40,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Delete the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"build"}]},{"block_type":"text","content":"directory if it exists:"}]},{"block_type":"element","block":"k6r61xod","search_text":"rm -rf ./deploy/build ","text_count":22,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"rm -rf ./deploy/build"}]}]},{"block_type":"element","block":"k6r61xoe","search_text":"Then build the app using webpack:","text_count":33,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Then build the app using webpack:"}]},{"block_type":"element","block":"k6r61xof","search_text":"npm run build ","text_count":14,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"npm run build"}]}]},{"block_type":"element","block":"k6r61xog","search_text":"Finally, run the packer’s pack command, passing it the dist folder as an argument:","text_count":82,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Finally, run the packer&rsquo;s pack command, passing it the"},{"block_type":"element","tag_name":"code","attributes":{},"children":[{"block_type":"text","content":"dist"}]},{"block_type":"text","content":"folder as an argument:"}]},{"block_type":"element","block":"k6r61xoh","search_text":"npx nodegui-packer --pack ./dist ","text_count":33,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"npx nodegui-packer --pack ./dist"}]}]},{"block_type":"element","block":"k6r61xoi","search_text":"This will result in the following:","text_count":34,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"This will result in the following:"}]},{"block_type":"element","block":"k6r61xoj","search_text":"On macOS, packer will output a dmg file. On Linux, packer will output an AppImage , which is something similar to an .app file in macOS. On Windows, packer outputs a folder containing the executable and all the dlls. ","text_count":217,"tag_name":"ul","attributes":{},"children":[{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"On macOS, packer will output a"},{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"dmg"}]},{"block_type":"text","content":"file."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"On Linux, packer will output an"},{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"AppImage"}]},{"block_type":"text","content":", which is something similar to an"},{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":".app"}]},{"block_type":"text","content":"file in macOS."}]},{"block_type":"element","tag_name":"li","attributes":{},"children":[{"block_type":"text","content":"On Windows, packer outputs a folder containing the executable and all the dlls."}]}]},{"block_type":"element","block":"k6r61xok","search_text":"Once the command is successful, it should print the output directory, which is typically inside the deploy/<os>/build directory. Make sure you don’t commit this directory:","text_count":171,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Once the command is successful, it should print the output directory, which is typically inside the"},{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"deploy/&lt;os&gt;/build"}]},{"block_type":"text","content":"directory. Make sure you"},{"block_type":"element","tag_name":"em","attributes":{},"children":[{"block_type":"text","content":"don&rsquo;t"}]},{"block_type":"text","content":"commit this directory:"}]},{"block_type":"element","block":"k6r61xol","search_text":". └── deploy ├── config.json └── linux ├── build │ └── MemeApp │ ├── Application-aed23d8-x86_64.AppImage │ ├── AppRun -> qode │ ├── default.desktop │ ├── default.png │ ├── dist │ │ ├── f59514675cec2e70ce8598286c94dc22.png │ │ ├── index.js │ │ └── nodegui_core-7b3e73f5fef149ae765d5ea5d13d5bb0.node │ ├── doc │ │ └── ... │ ├── lib │ │ └── ... │ ├── plugins │ │ └── ... │ ├── qode │ ├── qode.json │ └── qt.conf └── MemeApp ├── default.desktop ├── default.png └── qode.json ","text_count":471,"tag_name":"pre","attributes":{},"children":[{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":".\n└── deploy\n    ├── config.json\n    └── linux\n        ├── build\n        │   └── MemeApp\n        │       ├── Application-aed23d8-x86_64.AppImage\n        │       ├── AppRun -&gt; qode\n        │       ├── default.desktop\n        │       ├── default.png\n        │       ├── dist\n        │       │   ├── f59514675cec2e70ce8598286c94dc22.png\n        │       │   ├── index.js\n        │       │   └── nodegui_core-7b3e73f5fef149ae765d5ea5d13d5bb0.node\n        │       ├── doc\n        │       │   └── ...\n        │       ├── lib\n        │       │   └── ...\n        │       ├── plugins\n        │       │   └── ...\n        │       ├── qode\n        │       ├── qode.json\n        │       └── qt.conf\n        └── MemeApp\n            ├── default.desktop\n            ├── default.png\n            └── qode.json"}]}]},{"block_type":"element","block":"k6r61xom","search_text":"The Linux distributable is deploy/linux/build/MemeApp/Application-aed23d8-x86_64.AppImage 🚀📦.","text_count":95,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"The Linux distributable is"},{"block_type":"element","tag_name":"code","attributes":{"language":"python"},"children":[{"block_type":"text","content":"deploy/linux/build/MemeApp/Application-aed23d8-x86_64.AppImage"}]},{"block_type":"text","content":"🚀📦."}]},{"block_type":"element","block":"k6r61xon","search_text":"Conclusion","text_count":10,"tag_name":"h2","attributes":{},"children":[{"block_type":"text","content":"Conclusion"}]},{"block_type":"element","block":"k6r61xoo","search_text":"In this tutorial, we successfully built a real-world meme search app using NodeGui in roughly 200 lines of code. We learned some of the library’s basic concepts and capabilities. We also were able to package the finished app into a distributable that can be shared with end users.","text_count":280,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"In this tutorial, we successfully built a real-world meme search app using NodeGui in roughly 200 lines of code. We learned some of the library&rsquo;s basic concepts and capabilities. We also were able to package the finished app into a distributable that can be shared with end users."}]},{"block_type":"element","block":"k6r61xop","search_text":"I believe NodeGui opens the door to create a lot of truly efficient native apps with Node.js.","text_count":93,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"I believe NodeGui opens the door to create a lot of truly efficient native apps with Node.js."}]},{"block_type":"element","block":"k6r61xoq","search_text":"NodeGui also supports libraries and frameworks such as React (official) , Angular (community) and soon Vue.js (community) . Please check these out and give them a star on GitHub if they’re the sort of thing you’re interested in.","text_count":228,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"NodeGui also supports libraries and frameworks such as"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://react.nodegui.org/"},"children":[{"block_type":"text","content":"React (official)"}]},{"block_type":"text","content":","},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/irustm/angular-nodegui"},"children":[{"block_type":"text","content":"Angular (community)"}]},{"block_type":"text","content":"and soon"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/NovusTheory/vue-nodegui"},"children":[{"block_type":"text","content":"Vue.js (community)"}]},{"block_type":"text","content":". Please check these out and give them a star on GitHub if they&rsquo;re the sort of thing you&rsquo;re interested in."}]},{"block_type":"element","block":"k6r61xor","search_text":"NodeGui is an open-source library that will greatly benefit from code contributions . It has a relatively easy codebase to understand and a very welcoming community. I encourage everyone to help out.","text_count":199,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"NodeGui is an open-source library that will"},{"block_type":"element","tag_name":"a","attributes":{"href":"https://github.com/nodegui/.github/blob/master/CONTRIBUTING.md"},"children":[{"block_type":"text","content":"greatly benefit from code contributions"}]},{"block_type":"text","content":". It has a relatively easy codebase to understand and a very welcoming community. I encourage everyone to help out."}]},{"block_type":"element","block":"k6r61xos","search_text":"Finally, thanks to their many inbuilt widgets and styling through CSS, I believe NodeGui apps are as easy to develop as web or Electron apps. I encourage you to build something cool of your own and share it with us.","text_count":215,"tag_name":"p","attributes":{},"children":[{"block_type":"text","content":"Finally, thanks to their many inbuilt widgets and styling through CSS, I believe NodeGui apps are as easy to develop as web or Electron apps. I encourage you to build something cool of your own and share it with us."}]},{"block_type":"element","block":"k6r61xot","search_text":"","text_count":0,"tag_name":"script","attributes":{"src":"https://cdn.rawgit.com/alexmwalker/book-template/master/src/docs/assets/js/book.js"},"children":[]},{"block_type":"element","block":"k6r61xou","search_text":"","text_count":0,"tag_name":"script","attributes":{"src":"assets/js/prism.js"},"children":[]}]}]}